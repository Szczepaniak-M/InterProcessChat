LOG IN:
The first part of communications between processes is the IPC queue named loginQueue.
The key, which identify the queue, is typed by user, when he/she run server.
Then the client must type the same key, when he/she starts `client` program to connect `client` with correct queue.

The struct LogInRequest is send by client to server and contains:
 - long recipient - it is the ID of recipient used to get the correct struct from the queue.
                    The only recipient of this type of struct is the server, so it is always equals 1
 - char login[32] - it is the login typed by the user
 - char password[32] - it is the password typed by the user
 - long sender - it is the ID of process, which send the struct

Next the server checks the login and password and send the response (struct LogInResponse) by the loginQueue
 - long recipient - it is the ID of process, which send the struct LogIn ('long sender' from LogInRequest)
 - long idClient - it is the ID of user from config.txt, if the login and password match to one of the user from that file.

If the client get idClient different greater than 0, he/she is logged in and can use the other option of program.
If not, he/she get information about left attempts and must type login and password once again and .


The second part is private queue of each `client` program. Every client has its own IPC queue to communicate with server
and process in `server` program, which handles requests.

The user can send a request (struct ServerRequest) by using the queue, which consists of:
 - long typeOfRequest - it is the type of request, which server use to execute the correct operations
 - char extra[64] - it is the extra argument, which is needed in joining/leaving group and showing the members of the group.
                    In the other cases it is the array is empty and not used.

The server is receiving the request (msgtyp < -11) and execute the proper function in according to typeOfRequest.


RECEIVING MESSAGES:
Type Of Request:
1 - request about message send by user:
12 - message send by user and received by server
13 - message send from server to user
After receiving the request, the server receive the struct Message from IPC queue with msgtyp == 12.
The struct is send by client before sending ServerRequest and contains:
 - long typeOfRequest - type of request
 - int recipientId - when the message is send from user to server, it contains clientId of the user, who send the massage
                   - when the message is send from server to user, it contains idClient of the user, which will receive message
 - int queueId - msgid, it is identifier of queue of sender and then queue of recipient
 - char typeOfMessages - there are 4 types of messages, described below
 - char nameRecipient[32] - the login of user or the name of group, who is a recipient
 - char text[2048] - text of the message
 - long idSender - clientId of the sender
 - char nameSender[64] - name of the sender

Type of messages:
- 0 - "user"; it is a normal message, which user send to server and server send it to recipient
- 1 - "group"; it is a group message, which user send to server and server send it to the members of the group
- 2 - "server"; it is message, which server send to a user after he/she joins/leaves the group or (un)block user/group.
       In field `text`, there are information about confirmation or rejection of the request, which is displayed.
- 3 - "kill"; it is message, which is used to end the forked process, which receives messages. It is send to user by server,
       when he/she wants to log out

After receiving the message, the server check if there is a user/group with the login/name matching to data from config.txt
If the server don't find matching recipient, then it send information about wrong recipient's name to the sender.
Then the server checks if the recipient is online. If the recipient is offline, then the server sends information
about it to the sender and don't send message to recipient. Finally, the server check if the recipient is blocking the user or the group.
If the recipient is blocking the sender, then the server sends information about it to the sender and don't send message to recipient.
If the all conditions are met, then the sender change recipientId and queueId and sends the struct Message to recipient/members
of the group. The messages are received by forked process of `client` and displaying on the console.


SHOWING LISTS:
Type of Request:
2 - request about showing online Users:
3 - request about showing members of the group:
4 - request about showing available groups:
14 - message with information from server:
After receiving the request, the server looks for suitable data and send it to user.
The server uses struct ShowResponse to send back information to user, which consists of:
 - long typeOfRequest - type of message (always 14)
 - long listLength - it is the amount of structs ShowResponse necessary to receive by client to show complete information
 - char list[32] - it is the one position from the list which user want to display
                   (e.g. it can be the one of the nick of online users)
If the user sends request to display the list of online users and there are 3 online users,
the server will send 3 struct showQueue containing logins of the online users, which will be received and displayed by client.
The three options work in the same way, but server sends different information
Information about the name of group, which user wants to display the members is provided by `extra` in a ServerRequest
If the name of group, whose members user wants to display, typed by the user do not match any group, listLength is
equals to -1 and client shows information that "There is no group with this name"

LOG OUT
Type of Request:
11 - Logging out:
After receiving the request by requestQueue, the server updates lists of online users
and send the struct Message with type 3 (struct Message is described in section "Receiving Messages"),
to close users's process, which receives messages from other users.

OTHER OPERATIONS:
Type of Request:
5 - Joining in the group:
6 - Leaving the group:
7 - Blocking the user:
8 - Blocking the group:
9 - Unblocking the user:
10 - Unblocking the group:
After receiving the request, the server updates lists of members of the group/ blocked users/ blocked groups
and send the struct Message with type 2 (struct Message is described in section "Receiving Messages"),
to the user with confirmation or rejection of the operation.
Information about the name of group/user, which user wants joins/leaves/block/unblock, is provided by `extra` in a ServerRequest
